{
  "resourceType": "Library",
  "id": "CDCMMEClinicalConversionFactors",
  "url": "http://fhir.org/guides/cdc/opioid-cds/Library/CDCMMEClinicalConversionFactors",
  "version": "3.0.0",
  "name": "CDCMMEClinicalConversionFactors",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  } ],
  "parameter": [ {
    "name": "CDCMMEClinicalConversionFactorsCodeSystem",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "CodeSystem"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBDRENNTUVDbGluaWNhbENvbnZlcnNpb25GYWN0b3JzIHZlcnNpb24gJzMuMC4wJwoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScKCmRlZmluZSBDRENNTUVDbGluaWNhbENvbnZlcnNpb25GYWN0b3JzQ29kZVN5c3RlbToKICAgIENvZGVTeXN0ZW0gewogICAgICAgIG5hbWU6IHN0cmluZyB7IHZhbHVlOiAnQ0RDTU1FQ2xpbmljYWxDb252ZXJzaW9uRmFjdG9ycycgfSwKICAgICAgICBzdXBwbGVtZW50czogY2Fub25pY2FsIHsgdmFsdWU6ICdodHRwOi8vd3d3Lm5sbS5uaWguZ292L3Jlc2VhcmNoL3VtbHMvcnhub3JtJyB9LAogICAgICAgIGNvbmNlcHQ6IExpc3Q8RkhJUi5Db2RlU3lzdGVtLkNvbmNlcHQ+IHsKICAgICAgICAgICAgRkhJUi5Db2RlU3lzdGVtLkNvbmNlcHQgewogICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnMjY3MCcgfSwKICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0cmluZyB7IHZhbHVlOiAnQ29kZWluZScgfSwKICAgICAgICAgICAgICAgIHByb3BlcnR5OiBMaXN0PEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5Ij4gewogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdjb252ZXJzaW9uLWZhY3RvcicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkZWNpbWFsIHsgdmFsdWU6IDAuMTUgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgRkhJUi5Db2RlU3lzdGVtLkNvbmNlcHQgewogICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnNDMzNycgfSwKICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0cmluZyB7IHZhbHVlOiAnRmVudGFueWwnIH0sCiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogTGlzdDxGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSI+IHsKICAgICAgICAgICAgICAgICAgICBGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSIgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnZG9zZS1mb3JtLWNvbnZlcnNpb24tZmFjdG9yJyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmluZyB7IHZhbHVlOiAnMzE2OTg3OjcyMDBAMC4zMzMzMzMzMycgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgRkhJUi5Db2RlU3lzdGVtLkNvbmNlcHQgewogICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnMzQyMycgfSwKICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0cmluZyB7IHZhbHVlOiAnSHlkcm9tb3JwaG9uZScgfSwKICAgICAgICAgICAgICAgIHByb3BlcnR5OiBMaXN0PEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5Ij4gewogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdjb252ZXJzaW9uLWZhY3RvcicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkZWNpbWFsIHsgdmFsdWU6IDQgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgRkhJUi5Db2RlU3lzdGVtLkNvbmNlcHQgewogICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnNTQ4OScgfSwKICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0cmluZyB7IHZhbHVlOiAnSHlkcm9jb2RvbmUnIH0sCiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogTGlzdDxGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSI+IHsKICAgICAgICAgICAgICAgICAgICBGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSIgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnY29udmVyc2lvbi1mYWN0b3InIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGVjaW1hbCB7IHZhbHVlOiAxIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS5Db25jZXB0IHsKICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUgeyB2YWx1ZTogJzY4MTMnIH0sCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBzdHJpbmcgeyB2YWx1ZTogJ01ldGhhZG9uZScgfSwKICAgICAgICAgICAgICAgIHByb3BlcnR5OiBMaXN0PEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5Ij4gewogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdkb3NlLXJhbmdlLWNvbnZlcnNpb24tZmFjdG9yJyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmluZyB7IHZhbHVlOiAnMS0yMDo0JyB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSIgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnZG9zZS1yYW5nZS1jb252ZXJzaW9uLWZhY3RvcicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdHJpbmcgeyB2YWx1ZTogJzIxLTQwOjgnIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdkb3NlLXJhbmdlLWNvbnZlcnNpb24tZmFjdG9yJyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmluZyB7IHZhbHVlOiAnNDEtNjA6MTAnIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdkb3NlLXJhbmdlLWNvbnZlcnNpb24tZmFjdG9yJyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmluZyB7IHZhbHVlOiAnNjEtKjoxMicgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgRkhJUi5Db2RlU3lzdGVtLkNvbmNlcHQgewogICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnNzA1MicgfSwKICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0cmluZyB7IHZhbHVlOiAnTW9ycGhpbmUnIH0sCiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogTGlzdDxGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSI+IHsKICAgICAgICAgICAgICAgICAgICBGSElSLkNvZGVTeXN0ZW0uIkNvbmNlcHQiLiJQcm9wZXJ0eSIgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiAnY29udmVyc2lvbi1mYWN0b3InIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGVjaW1hbCB7IHZhbHVlOiAxIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS5Db25jZXB0IHsKICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUgeyB2YWx1ZTogJzc4MDQnIH0sCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBzdHJpbmcgeyB2YWx1ZTogJ094eWNvZG9uZScgfSwKICAgICAgICAgICAgICAgIHByb3BlcnR5OiBMaXN0PEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5Ij4gewogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdjb252ZXJzaW9uLWZhY3RvcicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkZWNpbWFsIHsgdmFsdWU6IDEuNSB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBGSElSLkNvZGVTeXN0ZW0uQ29uY2VwdCB7CiAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICc3ODE0JyB9LAogICAgICAgICAgICAgICAgZGlzcGxheTogc3RyaW5nIHsgdmFsdWU6ICdPeHltb3JwaG9uZScgfSwKICAgICAgICAgICAgICAgIHByb3BlcnR5OiBMaXN0PEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5Ij4gewogICAgICAgICAgICAgICAgICAgIEZISVIuQ29kZVN5c3RlbS4iQ29uY2VwdCIuIlByb3BlcnR5IiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb2RlIHsgdmFsdWU6ICdjb252ZXJzaW9uLWZhY3RvcicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkZWNpbWFsIHsgdmFsdWU6IDMgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgICAgICAK"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}