{
  "resourceType": "Library",
  "id": "OpioidCDSCommon",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSCommon</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">0.1.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"2\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogicMK2020</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"15\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>ServiceRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSCommon version '0.1.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OMTKLogicMK2020 version '0.1.1' called OMTKLogic\n\ncodesystem &quot;LOINC&quot;: 'http://loinc.org'\ncodesystem &quot;SNOMED&quot;: 'http://snomed.info/sct'\ncodesystem &quot;Medication Request Category Codes&quot;: 'http://terminology.hl7.org/CodeSystem/medicationrequest-category'\ncodesystem &quot;Medication Request Status Codes&quot;: 'http://hl7.org/fhir/medication-request-status'\ncodesystem &quot;Condition Clinical Status Codes&quot;: 'http://terminology.hl7.org/CodeSystem/condition-clinical'\n\nvalueset &quot;US Core Condition Category Codes&quot;: 'http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category'\n\n// Expression-based\nvalueset &quot;Opioid analgesics with ambulatory misuse potential&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential'\nvalueset &quot;Extended release opioid with ambulatory misuse potential&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/extended-release-opioid-with-ambulatory-misuse-potential'\nvalueset &quot;Buprenorphine and methadone medications&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/buprenorphine-and-methadone-medications'\n\n// Enumerated-compose\nvalueset &quot;Limited life expectancy conditions&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions'\nvalueset &quot;Therapies indicating end of life care&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care'\nvalueset &quot;Conditions likely terminal for opioid prescribing&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing'\nvalueset &quot;CDC malignant cancer conditions&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/cdc-malignant-cancer-conditions'\nvalueset &quot;Oncology specialty designations (NUCC)&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/oncology-specialty-designations'\nvalueset &quot;Opioid misuse disorders&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-disorders'\nvalueset &quot;Substance misuse behavioral counseling&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-misuse-behavioral-counseling'\n\nvalueset &quot;Conditions documenting substance misuse&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-documenting-substance-misuse'\n// Harvested from VSAC - OID: 2.16.840.1.113883.3.464.1003.101.12.1001\n// Reviewed with Terminology, 2020-02-05 - Value set name in VSAC is &quot;Office Visit&quot;, need to verify suitability\nvalueset &quot;Office Visit&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/office-visit'\nvalueset &quot;Opioid counseling procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-counseling-procedure'\n\n/* Existing sets for first six recs */\nvalueset &quot;Benzodiazepine medications&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepine-medications'\nvalueset &quot;Non-opioid drug urine screening&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/non-opioid-drug-urine-screening'\nvalueset &quot;Naloxone medications&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone-medications'\nvalueset &quot;Opioid misuse assessment procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-assessment-procedure'\nvalueset &quot;Opioid drug urine screening&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-drug-urine-screening'\nvalueset &quot;Hospice Disposition&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-disposition' // Harvested from VSAC - OID: 2.16.840.1.113762.1.4.1108.15\nvalueset &quot;Hospice Finding Codes&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding'\nvalueset &quot;Hospice Procedure Codes&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure'\n\nvalueset &quot;Pain treatment plan&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pain-treatment-plan'\nvalueset &quot;Pain management procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pain-management-procedure'\nvalueset &quot;PDMP review procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pdmp-review-procedure'\nvalueset &quot;PDMP data reviewed finding&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pdmp-data-reviewed-finding'\n\ncode &quot;Community&quot;: 'community' from &quot;Medication Request Category Codes&quot;\ncode &quot;Active Condition&quot;: 'active' from &quot;Condition Clinical Status Codes&quot;\ncode &quot;Active MedicationRequest&quot;: 'active' from &quot;Medication Request Status Codes&quot;\n\n// TODO: code &quot;Nonpharmacologic therapy and nonopioid pharmocologic&quot;: 'TODO' from &quot;TODO&quot;\n\ncontext Patient\n\n// TODO: Capture process decisions for long-term opioid use\ndefine IsForChronicPain: true\n\ndefine &quot;Active Ambulatory Opioid Rx&quot;:\n  /* (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest: status in &quot;Active MedicationRequest&quot;])) Rx */\n  (\n    (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n      where date from MR.authoredOn 2 years or less on or before Today()\n        and MR.medication is Reference or MR.medication in &quot;Opioid analgesics with ambulatory misuse potential&quot;\n  ) Rx\n    let Med: [Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, '/')))]\n    where not(Rx.medication is Reference) or Med.code in &quot;Opioid analgesics with ambulatory misuse potential&quot;\n      return\n        MedicationRequest {\n          id: Rx.id,\n          status: Rx.status,\n          intent: Rx.intent,\n          category: Rx.category,\n          medication: if Rx.medication is Reference then First(Med.code) else Rx.medication as CodeableConcept,\n          subject: Rx.subject,\n          recorder: Rx.recorder,\n          dosageInstruction: Rx.dosageInstruction,\n          dispenseRequest: Rx.dispenseRequest\n        }\n\ndefine &quot;Active Ambulatory Benzodiazepine Rx&quot;:\n/* (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest: status in &quot;Active MedicationRequest&quot;])) Rx */\n(\n  (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n    where date from MR.authoredOn 2 years or less on or before Today()\n      and MR.medication is Reference or MR.medication in &quot;Benzodiazepine medications&quot;\n) Rx\n  let Med: [Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, '/')))]\n  where not(Rx.medication is Reference) or Med.code in &quot;Benzodiazepine medications&quot;\n    return\n      MedicationRequest {\n        id: Rx.id,\n        status: Rx.status,\n        intent: Rx.intent,\n        category: Rx.category,\n        medication: if Rx.medication is Reference then First(Med.code) else Rx.medication as CodeableConcept,\n        subject: Rx.subject,\n        recorder: Rx.recorder,\n        dosageInstruction: Rx.dosageInstruction,\n        dispenseRequest: Rx.dispenseRequest\n      }\n\ndefine &quot;Active Ambulatory Naloxone Rx&quot;:\n/* (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest: status in &quot;Active MedicationRequest&quot;])) Rx */\n(\n  (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n    where date from MR.authoredOn 2 years or less on or before Today()\n      and MR.medication is Reference or MR.medication in &quot;Naloxone medications&quot;\n) Rx\n  let Med: [Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, '/')))]\n  where not(Rx.medication is Reference) or Med.code in &quot;Naloxone medications&quot;\n    return\n      MedicationRequest {\n        id: Rx.id,\n        status: Rx.status,\n        intent: Rx.intent,\n        category: Rx.category,\n        medication: if Rx.medication is Reference then First(Med.code) else Rx.medication as CodeableConcept,\n        subject: Rx.subject,\n        recorder: Rx.recorder,\n        dosageInstruction: Rx.dosageInstruction,\n        dispenseRequest: Rx.dispenseRequest\n      }\n\ndefine function &quot;Get Active Ambulatory Medication Requests&quot; (value List&lt;MedicationRequest&gt;) returns List&lt;MedicationRequest&gt;:\n  value Rx\n    where Rx.status.value = 'active'\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n\ndefine function &quot;Is Ambulatory Medication Request?&quot; (value List&lt;MedicationRequest&gt;) returns List&lt;MedicationRequest&gt;:\n  value Rx\n    where exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n\ndefine function &quot;Is Opioid Analgesic with Ambulatory Misuse Potential?&quot;(value List&lt;MedicationRequest&gt;):\n  value Rx\n    let MedRef: if (Rx.medication is FHIR.Reference) then (Rx.medication as FHIR.Reference).reference else null,\n      Med: if MedRef is null then (Rx.medication as FHIR.CodeableConcept) else SingletonFrom([Medication: id in (Last(Split(MedRef, '/')))] Med return Med.code)\n    where Med in &quot;Opioid analgesics with ambulatory misuse potential&quot;\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n    return\n          MedicationRequest {\n            id: Rx.id,\n            status: Rx.status,\n            intent: Rx.intent,\n            category: Rx.category,\n            medication: FHIR.CodeableConcept{ coding: Med.coding },\n            subject: Rx.subject,\n            authoredOn: Rx.authoredOn,\n            recorder: Rx.recorder,\n            dosageInstruction: Rx.dosageInstruction,\n            dispenseRequest: Rx.dispenseRequest\n          }\n\ndefine function &quot;Is Benzodiazepine?&quot;(value List&lt;MedicationRequest&gt;):\n  value Rx\n    let MedRef: if (Rx.medication is FHIR.Reference) then (Rx.medication as FHIR.Reference).reference else null,\n      Med: if MedRef is null then (Rx.medication as FHIR.CodeableConcept) else SingletonFrom([Medication: id in (Last(Split(MedRef, '/')))] Med return Med.code)\n    where Med in &quot;Benzodiazepine medications&quot;\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n    return\n          MedicationRequest {\n            id: Rx.id,\n            status: Rx.status,\n            intent: Rx.intent,\n            category: Rx.category,\n            medication: FHIR.CodeableConcept{ coding: Med.coding },\n            subject: Rx.subject,\n            authoredOn: Rx.authoredOn,\n            recorder: Rx.recorder,\n            dosageInstruction: Rx.dosageInstruction,\n            dispenseRequest: Rx.dispenseRequest\n          }\n\ndefine &quot;End of Life Assessment&quot;:\n    // 1. Conditions indicating end of life or with limited life expectancy\n    exists (\n      &quot;Conditions Indicating End of Life or With Limited Life Expectancy&quot;\n    )\n    // 2. Admitted/referred/discharged to hospice care\n    or exists (\n      &quot;Admitted/Referred/Discharged to Hospice Care&quot;\n    )\n    // 3. Medications indicating end of life\n    /* or exists (\n      &quot;Medications Indicating End of Life&quot;\n    ) */\n\ndefine &quot;Conditions Indicating End of Life or With Limited Life Expectancy&quot;:\n  (\n    [Condition: category in &quot;US Core Condition Category Codes&quot;] C\n      where C.code in &quot;Conditions likely terminal for opioid prescribing&quot;\n        and exists (\n          C.clinicalStatus.coding Coding\n            where FHIRHelpers.ToCode(Coding) ~ &quot;Active Condition&quot;\n        )\n  )\n  union\n  (\n    [Condition: category in &quot;US Core Condition Category Codes&quot;] C\n      where C.code in &quot;Limited life expectancy conditions&quot;\n        and exists (\n          C.clinicalStatus.coding Coding\n            where FHIRHelpers.ToCode(Coding) ~ &quot;Active Condition&quot;\n        )\n  )\n\ndefine &quot;Admitted/Referred/Discharged to Hospice Care&quot;:\n  (\n    [Procedure: code in &quot;Hospice Procedure Codes&quot;] P\n      where P.status.value in { 'in-progress', 'completed' }\n  )\n  union\n  (\n    [ServiceRequest: code in &quot;Hospice Procedure Codes&quot;] E\n      where E.status.value in { 'planned', 'arrived', 'in-progress', 'finished', 'onleave' }\n  )\n  union\n  (\n    [Observation: code in &quot;Hospice Finding Codes&quot;] O\n      where not (O.status.value in { 'unknown', 'entered-in-error', 'cancelled' })\n  )\n  union\n  (\n    [Encounter] E\n      where\n        (\n          if E.hospitalization.dischargeDisposition.coding is null\n              or not exists (E.hospitalization.dischargeDisposition.coding)\n            then false\n          else E.hospitalization.dischargeDisposition in &quot;Hospice Disposition&quot;\n        )\n        and E.status.value in { 'planned', 'arrived', 'in-progress', 'finished', 'onleave' }\n  )\n\n/*\n\ndefine &quot;Medications Indicating End of Life&quot;:\n  (\n    [MedicationAdministration: &quot;End Of Life Opioids&quot;] MA\n      where MA.status.value in { 'in-progress', 'on-hold', 'completed' }\n  )\n  union\n  (\n    [MedicationDispense: &quot;End Of Life Opioids&quot;] MD\n      where MD.status.value in { 'preparation', 'in-progress', 'on-hold', 'completed' }\n  )\n  union\n  (\n    [MedicationRequest: &quot;End Of Life Opioids&quot;] MR\n      where MR.status.value in { 'active', 'completed' }\n  )\n  union\n  (\n    [MedicationStatement: &quot;End Of Life Opioids&quot;] MS\n      where MS.status.value in { 'active', 'completed', 'intended' }\n  )\n\n*/\n\ndefine &quot;Previous 10 Days Interval&quot;:\nInterval[Today() - 10 days, Today()]\n\ndefine &quot;First Month&quot;:\nInterval[Today() - 3 months, Today() - 2 months]\n\ndefine &quot;Second Month&quot;:\nInterval[Today() - 2 months, Today() - 1 months]\n\ndefine &quot;Third Month&quot;:\nInterval[Today() - 1 months, Today()]\n\ndefine &quot;Prescribed Opioids for 21 or more of 30 Days for each of the past 3 Months&quot;:\n  &quot;Days on Opioids during Period&quot;(&quot;First Month&quot;) &gt;= 21\n    and &quot;Days on Opioids during Period&quot;(&quot;Second Month&quot;) &gt;= 21\n    and &quot;Days on Opioids during Period&quot;(&quot;Third Month&quot;) &gt;= 21\n\ndefine function &quot;Prescription Relevant Period&quot;(prescription FHIR.MedicationRequest):\n  if (\n    prescription.authoredOn is not null and prescription.dispenseRequest is not null\n      and prescription.dispenseRequest.expectedSupplyDuration is not null\n  )\n  then Interval[\n    date from prescription.authoredOn,\n    date from prescription.authoredOn + System.Quantity{ value: GetDurationInDays(prescription.dispenseRequest.expectedSupplyDuration), unit: 'days' }\n  ]\n  else null\n\ndefine function &quot;Days on Opioids during Period&quot;(period Interval&lt;Date&gt;):\n  Sum(\n    (\n      collapse (\n        [MedicationRequest: &quot;Opioid analgesics with ambulatory misuse potential&quot;] OpioidPrescription\n        return &quot;Prescription Relevant Period&quot;( OpioidPrescription ) intersect period\n      )\n    ) OpioidUseInterval\n      return days between start of OpioidUseInterval and end of OpioidUseInterval\n  )\n\ndefine function Prescriptions(Orders List&lt;MedicationRequest&gt;):\n  Orders O\n    let\n      // NOTE: Assuming medication is specified as a CodeableConcept with a single RxNorm code\n      rxNormCode: FHIRHelpers.ToCode((O.medication as FHIR.CodeableConcept).coding[0]),\n      medicationName: OMTKLogic.GetMedicationName(rxNormCode),\n      // NOTE: Assuming a single dosage instruction element\n      dosageInstruction: O.dosageInstruction[0],\n      // NOTE: Assuming a single dose and rate element\n      doseAndRate: dosageInstruction.doseAndRate[0],\n      repeat: dosageInstruction.timing.repeat,\n      frequency: Coalesce(repeat.frequencyMax.value, repeat.frequency.value),\n      period: System.Quantity { value: repeat.period.value, unit: repeat.periodUnit.value },\n      doseDescription:\n        Coalesce(\n          // There should be a conversion from FHIR.SimpleQuantity to System.Quantity\n          if doseAndRate.dose is FHIR.Range\n            then ToString((doseAndRate.dose as FHIR.Range).low)\n                + '-' + ToString((doseAndRate.dose as FHIR.Range).high)\n                + (doseAndRate.dose as FHIR.Range).high.unit.value\n            else ToString(FHIRHelpers.ToQuantity(doseAndRate.dose)),\n            ''\n        ),\n      frequencyDescription:\n        ToString(dosageInstruction.timing.repeat.frequency.value) +\n          Coalesce(\n            '-' + ToString(dosageInstruction.timing.repeat.frequencyMax.value),\n            ''\n          )\n    return {\n      rxNormCode: rxNormCode,\n      isDraft: O.status.value = 'draft',\n      // NOTE: Assuming asNeeded is expressed as a boolean\n      isPRN: dosageInstruction.asNeeded,\n      prescription:\n        if dosageInstruction.text is not null then\n          medicationName + ' ' + dosageInstruction.text.value\n        else\n          // TODO: Shouldn't need the .value here on asNeededBoolean\n          medicationName + ' ' + doseDescription + ' q' + frequencyDescription + (if dosageInstruction.asNeeded then ' PRN' else ''),\n      dose: if doseAndRate.dose is FHIR.Range\n            then (doseAndRate.dose as FHIR.Range).high\n            else FHIRHelpers.ToQuantity(doseAndRate.dose),\n      dosesPerDay: Coalesce(OMTKLogic.ToDaily(frequency, period), 1.0)\n    }\n\ndefine function MME(prescriptions List&lt;MedicationRequest&gt;):\n  (Prescriptions(prescriptions)) P\n    let mme: SingletonFrom(OMTKLogic.CalculateMMEs({ { rxNormCode: P.rxNormCode, doseQuantity: P.dose, dosesPerDay: P.dosesPerDay } }))\n    return {\n      rxNormCode: P.rxNormCode,\n      isDraft: P.isDraft,\n      isPRN: P.isPRN,\n      prescription: P.prescription,\n      dailyDose: mme.dailyDoseDescription,\n      conversionFactor: mme.conversionFactor,\n      mme: mme.mme\n    }\n\ndefine function TotalMME(prescriptions List&lt;MedicationRequest&gt;):\n  System.Quantity {\n    value: Sum((MME(prescriptions)) M return M.mme.value),\n    unit: 'mg/d'\n  }\n\ndefine function GetDurationInDays(value FHIR.Duration):\n  if value is null then null\n  else\n    case\n      when value.code.value ~ 'a' then value.value.value * 365.0\n      when value.code.value ~ 'mo' then value.value.value * 30.0\n      when value.code.value ~ 'wk' then value.value.value * 7.0\n      when value.code.value ~ 'd' then value.value.value\n      when value.code.value ~ 'h' then value.value.value / 24.0\n      when value.code.value ~ 'min' then value.value.value / 60.0 / 24.0\n      when value.code.value ~ 's' then value.value.value / 60.0 / 60.0 / 24.0\n      when value.code.value ~ 'ms' then value.value.value / 60.0 / 60.0 / 24.0 / 1000.0\n      when value.code.value is null then Message(1000, true, 'Undefined', 'Error', 'Duration unit code is null')\n      else Message(1000, true, 'Undefined', 'Error', 'Unsupported duration unit code: ' + value.code.value)\n    end\n\ndefine function GetIngredient(rxNormCode Code):\n  OMTKLogic.GetIngredients(rxNormCode).ingredientName\n\ndefine function GetIngredients(rxNormCodes List&lt;Code&gt;):\n  rxNormCodes rnc return GetIngredient(rnc)\n\ndefine function GetMedicationNames(medications List&lt;MedicationRequest&gt;):\n  medications M\n    return OMTKLogic.GetIngredients(ToRxNormCode((M.medication as FHIR.CodeableConcept).coding)).rxNormCode.display\n\n/*\n*  Conversion Functions\n*/\ndefine function CodeableConceptsToString(concepts List&lt;FHIR.CodeableConcept&gt;):\n  concepts c return CodeableConceptToString(c)\n\n\ndefine function CodingToString(coding FHIR.Coding):\n  if (coding is null)\n  then null\n  else\n    'Code {' &amp;\n      'code: ' &amp; coding.code &amp;\n      'system: ' &amp; coding.system &amp;\n      'version: ' &amp; coding.version &amp;\n      'display: ' &amp; coding.display &amp;\n    '}'\n\ndefine function CodeableConceptToString(concept FHIR.CodeableConcept):\n  if (concept is null or concept.coding is null)\n  then null\n  else\n    'CodeableConcept {' &amp;\n      'Coding: [' &amp;\n        Combine(concept.coding Coding return CodingToString(Coding), ',')\n      &amp; ']'\n    &amp; '}'\n\ndefine function ToCodes(coding List&lt;FHIR.Coding&gt;):\n  coding c return FHIRHelpers.ToCode(c)\n\ndefine function ToRxNormCode(coding List&lt;FHIR.Coding&gt;):\n  singleton from (\n    coding C where C.system = 'http://www.nlm.nih.gov/research/umls/rxnorm'\n  )\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  }, {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon",
  "version": "0.1.1",
  "name": "OpioidCDSCommon",
  "title": "Library - OpioidCDS Common",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library OMTKLogic",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogicMK2020|0.1.1"
  }, {
    "type": "depends-on",
    "display": "Library Config",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig|0.1.1"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Code system SNOMED",
    "resource": "http://snomed.info/sct"
  }, {
    "type": "depends-on",
    "display": "Value set Opioid analgesics with ambulatory misuse potential",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
  }, {
    "type": "depends-on",
    "display": "Value set Extended release opioid with ambulatory misuse potential",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/extended-release-opioid-with-ambulatory-misuse-potential"
  }, {
    "type": "depends-on",
    "display": "Value set Buprenorphine and methadone medications",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/buprenorphine-and-methadone-medications"
  }, {
    "type": "depends-on",
    "display": "Value set Non-synthetic opioid medications",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/non-synthetic-opioid-medications"
  }, {
    "type": "depends-on",
    "display": "Value set Limited life expectancy conditions",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions"
  }, {
    "type": "depends-on",
    "display": "Value set Therapies indicating end of life care",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care"
  }, {
    "type": "depends-on",
    "display": "Value set Conditions likely terminal for opioid prescribing",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing"
  }, {
    "type": "depends-on",
    "display": "Value set CDC malignant cancer conditions",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/cdc-malignant-cancer-conditions"
  }, {
    "type": "depends-on",
    "display": "Value set Oncology specialty designations (NUCC)",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/oncology-specialty-designations"
  }, {
    "type": "depends-on",
    "display": "Value set Opioid misuse disorders",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-disorders"
  }, {
    "type": "depends-on",
    "display": "Value set Substance misuse behavioral counseling",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-misuse-behavioral-counseling"
  }, {
    "type": "depends-on",
    "display": "Value set Conditions documenting substance misuse",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-documenting-substance-misuse"
  }, {
    "type": "depends-on",
    "display": "Value set Office Visit",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/office-visit"
  }, {
    "type": "depends-on",
    "display": "Value set Opioid counseling procedure",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-counseling-procedure"
  }, {
    "type": "depends-on",
    "display": "Value set Benzodiazepine medications",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepine-medications"
  }, {
    "type": "depends-on",
    "display": "Value set Non-opioid drug urine screening",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/non-opioid-drug-urine-screening"
  }, {
    "type": "depends-on",
    "display": "Value set Naloxone medications",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone-medications"
  }, {
    "type": "depends-on",
    "display": "Value set Opioid misuse assessment procedure",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-assessment-procedure"
  }, {
    "type": "depends-on",
    "display": "Value set Opioid drug urine screening",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-drug-urine-screening"
  }, {
    "type": "depends-on",
    "display": "Value set Hospice Disposition",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-disposition"
  }, {
    "type": "depends-on",
    "display": "Value set Hospice Finding Codes",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding"
  }, {
    "type": "depends-on",
    "display": "Value set Hospice Procedure Codes",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
  }, {
    "type": "depends-on",
    "display": "Value set Observation Category Laboratory",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/observation-category-laboratory"
  }, {
    "type": "depends-on",
    "display": "Value set Observation Category Procedure",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/observation-category-procedure"
  }, {
    "type": "depends-on",
    "display": "Value set Pain treatment plan",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/pain-treatment-plan"
  }, {
    "type": "depends-on",
    "display": "Value set Pain management procedure",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/pain-management-procedure"
  }, {
    "type": "depends-on",
    "display": "Value set PDMP review procedure",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/pdmp-review-procedure"
  }, {
    "type": "depends-on",
    "display": "Value set PDMP data reviewed finding",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/pdmp-data-reviewed-finding"
  }, {
    "type": "depends-on",
    "display": "Value set Cocaine Urine Tests",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/cocaine-urine-drug-screening-tests"
  }, {
    "type": "depends-on",
    "display": "Value set PCP Urine Tests",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/phencyclidine-urine-drug-screening-tests"
  }, {
    "type": "depends-on",
    "display": "Value set Community",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/medicationrequest-category-community"
  }, {
    "type": "depends-on",
    "display": "Value set Active Condition",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-clinical-status-active"
  }, {
    "type": "depends-on",
    "display": "Value set Active MedicationRequest",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/medicationrequest-status-active"
  }, {
    "type": "depends-on",
    "display": "Value set Encounter Diagnosis Condition Category",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-encounter-diagnosis-category"
  }, {
    "type": "depends-on",
    "display": "Value set Problem List Condition Category",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-problem-list-category"
  }, {
    "type": "depends-on",
    "display": "Value set US Core Health Concern Condition Category",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-us-core-health-concern-category"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Opioid Other Than Synthetic Ordered In Last 12 Months",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Active Ambulatory Opioid Rx",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Active Ambulatory Benzodiazepine Rx",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Active Ambulatory Naloxone Rx",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "US Core-Categorized Conditions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Conditions Indicating End of Life or With Limited Life Expectancy",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Service Requests",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Admitted/Referred/Discharged to Hospice Care",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "End of Life Assessment",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Previous 10 Days Interval",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "First Month",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Second Month",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Third Month",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Prescribed Opioids for 21 or more of 30 Days for each of the past 3 Months",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "status", "authoredOn", "medication" ],
    "codeFilter": [ {
      "path": "status",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/medicationrequest-status-active"
    } ]
  }, {
    "type": "Medication",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Medication" ],
    "mustSupport": [ "id" ],
    "codeFilter": [ {
      "path": "id"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "authoredOn", "medication" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "authoredOn", "medication" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "authoredOn", "medication" ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "category" ],
    "codeFilter": [ {
      "path": "category",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-encounter-diagnosis-category"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "category" ],
    "codeFilter": [ {
      "path": "category",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-problem-list-category"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "category" ],
    "codeFilter": [ {
      "path": "category",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-us-core-health-concern-category"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status", "status.value" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "mustSupport": [ "code", "status", "status.value" ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "period", "period.start", "status", "status.value" ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "medication" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}