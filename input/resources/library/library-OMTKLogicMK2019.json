{
  "resourceType": "Library",
  "id": "library-OMTKLogicMK2019",
  "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogicMK2019",
  "version": "0.1.1",
  "name": "OMTKLogicMK2019",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}